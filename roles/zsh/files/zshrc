export ZSH="$HOME/.oh-my-zsh"
export VISUAL=nvim;
export EDITOR=nvim;
export GOPATH="/home/dvragulin/.go"
PATH=$PATH:$GOPATH/bin # Add GOPATH/bin to PATH for scripting
export FZF_DEFAULT_OPTS="--ansi --preview-window 'right:60%' --preview 'bat --color=always --style=full --line-range :300 {}'"
export BAT_THEME="ansi"
export ZSH_TMUX_AUTOSTART=false
export ZSH_TMUX_AUTOQUIT=true
export ZSH_TMUX_AUTOCONNECT=false
export TERM=xterm-256color
export NAP_PRIMARY_COLOR='0xcbe3e7'
export NAP_RED='0xB87A7A'
export NAP_GREEN='0x7AB87A'
export NAP_FOREGROUND='0xcbe3e7'
export NAP_BACKGROUND='0x2B2B2B'
export NAP_BLACK='0x2B2B2B'
export NAP_GRAY='0x7AB8B8'
export NAP_WHITE='0xcbe3e7'
export NAP_THEME="nord"

ZSH_THEME="af-magic"
DISABLE_AUTO_UPDATE="true"

plugins=(
   sudo 
   zsh-syntax-highlighting
   tmux
   # Auto start tmux
   #https://github.com/ohmyzsh/ohmyzsh/tree/master/plugins/tmux
)

source $ZSH/oh-my-zsh.sh

# User configuration
if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='nvim'
else
  export EDITOR='nvim'
fi

# k8s aliases
[ -f ~/.kubectl_aliases ] && source ~/.kubectl_aliases

# Other aliases
alias vim="nvim"
alias mk="minikube"
alias mail="aerc"
alias email="aerc"
alias vf='nvim "$(fzf)"'
alias cf='cat "$(fzf)"'
alias yt='ytfzf'
alias h='history'
alias r='ranger'
alias mkdir='mkdir -p'
alias t='tmux'
#alias ts='tmux list-sessions'
alias tf='terraform'
alias tfm='terraformer'
alias kp='keepassxc'
alias ap='ansible-playbook'
alias pwgen='makepasswd --chars=32 --count=5'
alias youtube-watch='yt'
alias youtube-download-audio='yt-dlp -x --audio-format mp3 --cookies-from-browser firefox'
alias youtube-download-video='yt-dlp -f mp4 --cookies-from-browser firefox'
alias vpn='sudo openconnect --protocol=gp --user=$ADFS_USER_WORK --os=linux-64 $VPN_WORK_SRV'
alias radio="pyradio --play"
alias systemctl-f="sysz"
alias wtf="wtfutil"
alias news="newsboat -r"
alias curl_response_time="curl -s -w '\nLookup time:\t%{time_namelookup}\nConnect time:\t%{time_connect}\nPreXfer time:\t%{time_pretransfer}\nStartXfer time:\t%{time_starttransfer}\n\nTotal time:\t%{time_total}\n' -o /dev/null "
alias cls="/bin/ls"
alias ls="exa --header --icons --git --tree --level=1"
alias l="ls"
alias ll="ls -all"
alias lll="l -L 3 -D"
alias calc="bcal"
alias cat="/usr/bin/bat"
alias lg="/usr/bin/lazygit"
alias ld="/usr/bin/lazydocker"
alias bootstrap="$HOME/GIT/projects_home/dotfiles-public/bin/bootstrap.sh"
alias tw="taskwarrior-tui"
alias kafkacat="kcat"
alias log="lnav"
alias tsh-login="tsh login --proxy=$TELEPORT_PROXY"
alias gl="glab"
alias rg="rg -M 1000"
alias h="helm"
alias todo="todoist-cli"
alias td="todoist-cli q "
alias kk="k9s"
alias helm-yc="HELM_DRIVER=sql HELM_DRIVER_SQL_CONNECTION_STRING='${HELM_POSTGRES_CONNECTION_STRING_STAGE_YC_1}' helm"
alias helm-sb="HELM_DRIVER=sql HELM_DRIVER_SQL_CONNECTION_STRING='${HELM_POSTGRES_CONNECTION_STRING_STAGE_SB_1}' helm"
alias jia='jira issue assign "$1" "$JIRA_LOGIN_WORK"'
alias jiw='jira issue view'
alias napl='nap $(nap list | gum filter)'

# Extract anything alias
extract () {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)  tar xjf $1    ;;
      *.tar.gz) tar xzf $1    ;;
      *.bz2)    bunzip2 $1    ;;
      *.rar)    rar x $1    ;;
      *.gz)   gunzip $1   ;;
      *.tar)    tar xf $1   ;;
      *.tbz2)   tar xjf $1    ;;
      *.tgz)    tar xzf $1    ;;
      *.zip)    unzip $1    ;;
      *.Z)    uncompress $1 ;;
      *)      echo "'$1' cannot be extracted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

top () {
  echo "Pick top command..."
  TOP_COMMAND=$(gum choose "top" "sysmon" "iomon" "gpumon" "netmon" "xresmon" "energymon" --cursor.foreground "#D78700")
  case "$TOP_COMMAND" in
    "top"         ) btop ;;
    "sysmon"      ) glances ;;
    "iomon"       ) sudo iotop ;;
    "gpumon"      ) nvtop ;;
    "netmon"      ) sudo iftop -i enp0s31f6 ;;
    "xresmon"     ) xrestop ;;
    "energymon"   ) sudo /bin/powertop ;;
  esac
}

update () {
  echo "Pick update command..."
  UPDATE_COMMAND=$(gum choose "Applications" "Applications (without cache)" "Mirror list" "Git Repos" --cursor.foreground "#D78700")
  case "$UPDATE_COMMAND" in
    "Applications"                  ) yay -Syu ;;
    "Applications (without cache)"  ) yay -Scc && yay -Syu ;;;
    "Mirror list"                   ) sudo reflector -c "Russia" -f 20 -l 20 -p https -p http -n 20 --save /etc/pacman.d/mirrorlist --sort rate ;;
    "Git Repos"                     ) $HOME/.config/polybar/git_update.sh ;;
  esac
}

ji () {
  echo "Pick a jira filter..."
  JIRA_FILTER=$(gum choose "Filter: Personal" "Filter: 1-st Line"  "Filter: From ITSD"  "Filter: Backlog" "Filter: PaaS" "Filter: PaaS Backlog" "Filter: RFC" "Command: Assign" --cursor.foreground "#D78700")
  echo "Jira filter: \n   - $JIRA_FILTER"
  case "$JIRA_FILTER" in
    "Filter: Personal"       ) jira issue list -q "assignee = currentUser() AND resolution = Unresolved AND status not in (Canceled, Completed, Declined, Tested, Resolved)" --order-by STATUS ;;
    "Filter: 1-st Line"      ) jira issue list -q "project = $JIRA_CLI_PROJECT AND status in (Backlog, Blocked, Open, Reopened, Склад) AND component = slack_issue AND assignee is EMPTY AND \"Assigned team\" = $JIRA_CLI_TEAM" --order-by CREATED --reverse ;;
    "Filter: From ITSD"      ) jira issue list -q "assignee in (EMPTY) AND project = $JIRA_CLI_PROJECT AND status in (\"In Progress\", Backlog, Blocked, Open, Reopened) AND (component = \"from ITSD\" OR labels = v_backlog) AND (\"Assigned team\" is EMPTY OR \"Assigned team\" = $JIRA_CLI_TEAM)" --order-by CREATED --reverse ;;
    "Filter: Backlog"        ) jira issue list -q "assignee in (EMPTY) AND project = $JIRA_CLI_PROJECT AND status in (\"In Progress\", Backlog, Blocked, Open, Reopened) AND (component is EMPTY OR component != \"from ITSD\" AND component != slack_issue) AND (\"Assigned team\" is EMPTY OR \"Assigned team\" = $JIRA_CLI_TEAM) AND (labels not in ($JIRA_CLI_TEAM, matter-bot, migrations_v3, v_backlog) OR labels is EMPTY)" --order-by CREATED --reverse ;;
    "Filter: PaaS"           ) jira issue list -q "project = $JIRA_CLI_PROJECT AND (assignee in membersOf(\"(System) $JIRA_CLI_TEAM_2\") OR labels = $JIRA_CLI_TEAM_2_label OR \"Assigned team\" = $JIRA_CLI_TEAM_3) AND status not in (backlog,Closed, Resolved, Declined, Canceled, Done, Open)" --order-by STATUS ;;
    "Filter: PaaS Backlog"   ) jira issue list -q "project = $JIRA_CLI_PROJECT AND (assignee in membersOf(\"(System) $JIRA_CLI_TEAM_2\") OR labels = $JIRA_CLI_TEAM_2_label OR \"Assigned team\" = $JIRA_CLI_TEAM_3) AND status in (backlog)" ;;
    "Filter: RFC"            ) jira issue list -q "project = RFC and status not in (Backlog, Done)" --order-by STATUS ;;
    "Command: Assign"           ) jira issue assign "$1" "$JIRA_LOGIN_WORK" ;;
  esac
}

# Update smb-cli
#export PATH="$HOME/.go/bin:$HOME/.sbm-cli/usr/bin:$PATH"
#autoload -U compinit; compinit
#source /home/dvragulin/.sbm-cli/completion/zsh/sbm-cli

___MY_VMOPTIONS_SHELL_FILE="${HOME}/.jetbrains.vmoptions.sh"; if [ -f "${___MY_VMOPTIONS_SHELL_FILE}" ]; then . "${___MY_VMOPTIONS_SHELL_FILE}"; fi
